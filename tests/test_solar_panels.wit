// ==========================================
// MODULE 1: CONTRACT FORMATION FOUNDATION
// Complete semantic coverage with all assets used in clauses
// ==========================================

// ==========================================
// BASE TYPE SYSTEM
// ==========================================

// Core objects
object sistema_solar = "sistema solar fotovoltaico 8kW con 20 paneles solares inversor y sistema de monitoreo", movable;

// Core services
service pago_mensual = "pago renta mensual 2500.00 MXN", positive;
service entrega_instalacion = "entrega e instalacion completa", positive;
service formalizacion = "formalizacion contractual", positive;

// ==========================================
// LEGAL SUBJECTS
// ==========================================

subject arrendador = "SolarCorp México SA de CV";
subject arrendatario = "Juan Pérez González";

// ==========================================
// FOUNDATION ACTIONS
// ==========================================

action arrendar_sistema = "arrendar sistema solar fotovoltaico de 8kW con 20 paneles solares inversor y sistema de monitoreo", sistema_solar;
action pagar_renta_mensual = "pagar renta mensual de 2500.00 MXN por el uso del sistema solar en los primeros 5 días de cada mes", pago_mensual;
action entregar_sistema_60_dias = "entregar el sistema solar completamente instalado dentro de 60 días naturales contados desde la firma del contrato", entrega_instalacion;
action entregar_sistema_funcionando = "entregar sistema solar completamente instalado probado y en condiciones de generar energía según especificaciones técnicas", entrega_instalacion;
action pagar_transferencia_bancaria = "pagar la renta mediante transferencia bancaria a cuenta designada por el arrendador o en el domicilio del arrendatario si así se requiere", pago_mensual;
action iniciar_pago_desde_recepcion = "iniciar el pago de renta únicamente desde el día que reciba y pruebe el correcto funcionamiento del sistema solar", pago_mensual;
action formalizar_contrato_escrito = "formalizar este contrato por escrito con todas las firmas autografas de las partes", formalizacion;

// ==========================================
// FOUNDATION ASSETS (All will be used in clauses)
// ==========================================

// Core trilateral relationship
asset contrato_arrendamiento = arrendador, arrendar_sistema, arrendatario;

// Payment obligations
asset obligacion_pago_renta = arrendatario, pagar_renta_mensual, arrendador;
asset obligacion_transferencia = arrendatario, pagar_transferencia_bancaria, arrendador;
asset obligacion_inicio_pago = arrendatario, iniciar_pago_desde_recepcion, arrendador;

// Delivery obligations
asset obligacion_entrega_plazo = arrendador, entregar_sistema_60_dias, arrendatario;
asset obligacion_entrega_funcionando = arrendador, entregar_sistema_funcionando, arrendatario;

// Formalization obligation
asset obligacion_formalizacion = arrendador, formalizar_contrato_escrito, arrendatario;

// ==========================================
// FOUNDATION CLAUSES (Every asset gets legal force)
// ==========================================

// Core contract existence
clause contrato_base_obligatorio = oblig(contrato_arrendamiento);

// Payment structure (complete payment obligations)
clause pago_renta_obligatorio = oblig(contrato_arrendamiento) IMPLIES oblig(obligacion_pago_renta);
clause transferencia_obligatoria = oblig(obligacion_pago_renta) IMPLIES oblig(obligacion_transferencia);
clause inicio_pago_condicional = oblig(obligacion_entrega_funcionando) IMPLIES oblig(obligacion_inicio_pago);

// Delivery structure (complete delivery obligations)
clause entrega_plazo_obligatoria = oblig(contrato_arrendamiento) IMPLIES oblig(obligacion_entrega_plazo);
clause entrega_funcionando_obligatoria = oblig(obligacion_entrega_plazo) IMPLIES oblig(obligacion_entrega_funcionando);

// Legal formalization
clause formalizacion_obligatoria = oblig(contrato_arrendamiento) IMPLIES oblig(obligacion_formalizacion);

// Core reciprocal relationship (fundamental contract logic)
clause reciprocidad_fundamental = oblig(contrato_arrendamiento) EQUIV oblig(obligacion_pago_renta);

// ==========================================
// FOUNDATION JOINS (Commercial relationship)
// ==========================================

// Primary commercial relationship
asset acuerdo_comercial_principal = sell(contrato_arrendamiento, obligacion_pago_renta);

// Payment method specification
asset modalidad_pago = compensation(obligacion_transferencia, obligacion_inicio_pago);

// ==========================================
// MODULE 1 VALIDATION
// ==========================================

asset formacion_contractual_valida = global();

// ==========================================
// FOUNDATION SUMMARY
// ==========================================
// Assets defined: 7
// Assets used in clauses: 7 (100% coverage)
// Clauses: 7
// Join operations: 2
// Global validation: 1
// ==========================================

// ==========================================
// MODULE 2: PERFORMANCE OBLIGATIONS
// Depends on Module 1 foundation
// Complete semantic coverage with all assets used in clauses
// ==========================================

// ==========================================
// PERFORMANCE TYPE SYSTEM
// (Extends Module 1 types)
// ==========================================

// Performance services
service mantenimiento = "mantenimiento preventivo semestral y correctivo", positive;
service garantia = "garantía uso pacífico 20 anos", positive;
service seguro = "seguro integral contra danos robo y responsabilidad civil", positive;
service notificacion = "notificacion de reparaciones", positive;
service respuesta_mantenimiento = "respuesta a problemas de mantenimiento", positive;

// ==========================================
// PERFORMANCE ACTIONS
// ==========================================

action conservar_sistema = "conservar el sistema solar en el mismo estado durante el arrendamiento proporcionando mantenimiento preventivo semestral y correctivo cuando sea necesario", mantenimiento;
action garantizar_uso_pacifico = "garantizar el uso pacífico y eficiente del sistema solar durante los 20 anos de vigencia del contrato", garantia;
action mantener_seguro_integral = "mantener seguro contra danos robo y responsabilidad civil del sistema solar", seguro;
action no_interferir_uso = "abstenerse de interferir con el uso del sistema solar salvo por mantenimientos urgentes notificados con 24 horas de anticipacion", garantia;
action responder_defectos_ocultos = "responder por danos derivados de defectos de fabricacion o instalacion no detectables en la entrega del sistema", garantia;

// Tenant performance actions
action notificar_reparaciones = "notificar al arrendador cualquier mal funcionamiento o necesidad de reparacion del sistema a la brevedad posible", notificacion;
action usar_conforme_destino = "utilizar el sistema solar únicamente para generacion de energía eléctrica para autoconsumo y venta de excedentes", sistema_solar;
action responder_perjuicios = "responder de perjuicios al sistema solar por culpa negligencia propia de familiares o terceros autorizados", sistema_solar;

// Tenant remedial actions
action elegir_remedio_mantenimiento = "elegir entre rescindir el contrato o acudir a tribunal para exigir cumplimiento de obligaciones de mantenimiento", respuesta_mantenimiento;

// ==========================================
// PERFORMANCE ASSETS (All will be used in clauses)
// ==========================================

// Landlord performance obligations
asset mantenimiento_sistema = arrendador, conservar_sistema, arrendatario;
asset garantia_uso_pacifico = arrendador, garantizar_uso_pacifico, arrendatario;
asset seguro_sistema = arrendador, mantener_seguro_integral, arrendatario;
asset no_interferencia = arrendador, no_interferir_uso, arrendatario;
asset responsabilidad_defectos = arrendador, responder_defectos_ocultos, arrendatario;

// Tenant performance obligations
asset notificacion_reparaciones = arrendatario, notificar_reparaciones, arrendador;
asset uso_conforme = arrendatario, usar_conforme_destino, arrendador;
asset responsabilidad_perjuicios = arrendatario, responder_perjuicios, arrendador;

// Tenant remedial rights
asset derecho_remedio_mantenimiento = arrendatario, elegir_remedio_mantenimiento, arrendador;

// ==========================================
// PERFORMANCE CLAUSES (Every asset gets legal force)
// ==========================================

// Landlord obligations (all dependent on base contract)
clause mantenimiento_obligatorio = oblig(contrato_arrendamiento) IMPLIES oblig(mantenimiento_sistema);
clause garantia_obligatoria = oblig(contrato_arrendamiento) IMPLIES oblig(garantia_uso_pacifico);
clause seguro_obligatorio = oblig(contrato_arrendamiento) IMPLIES oblig(seguro_sistema);
clause no_interferencia_obligatoria = oblig(contrato_arrendamiento) IMPLIES oblig(no_interferencia);
clause responsabilidad_defectos_obligatoria = oblig(contrato_arrendamiento) IMPLIES oblig(responsabilidad_defectos);

// Tenant obligations (all dependent on base contract)
clause uso_conforme_obligatorio = oblig(contrato_arrendamiento) IMPLIES oblig(uso_conforme);
clause responsabilidad_perjuicios_obligatoria = oblig(contrato_arrendamiento) IMPLIES oblig(responsabilidad_perjuicios);

// Performance interaction obligations
clause notificacion_obligatoria = oblig(mantenimiento_sistema) IMPLIES oblig(notificacion_reparaciones);

// Remedial rights
clause derecho_remedio = not(mantenimiento_sistema) IMPLIES claim(derecho_remedio_mantenimiento);

// ==========================================
// PERFORMANCE JOINS (Service relationships)
// ==========================================

// Core service compensation (landlord services ↔ tenant payment)
asset servicio_integral = compensation(mantenimiento_sistema, obligacion_pago_renta);

// Protection system (guarantee ↔ notification)
asset sistema_proteccion = compensation(garantia_uso_pacifico, notificacion_reparaciones);

// Insurance and security system (insurance + non-interference)
asset cobertura_integral = join(seguro_sistema, no_interferencia);

// Responsibility balance (reciprocal responsibility obligations)
asset equilibrio_responsabilidades = compensation(responsabilidad_defectos, responsabilidad_perjuicios);

// ==========================================
// MODULE 2 VALIDATION
// ==========================================

asset cumplimiento_obligaciones_valido = global();

// ==========================================
// PERFORMANCE SUMMARY
// ==========================================
// Assets defined: 9
// Assets used in clauses: 9 (100% coverage)
// Clauses: 9
// Join operations: 4
// Global validation: 1
// Dependencies: 8 clauses depend on contrato_arrendamiento from Module 1
// ==========================================
// ==========================================
// MODULE 3: ENERGY BUSINESS
// Depends on Modules 1+2 foundation
// Complete semantic coverage with all assets used in clauses
// ==========================================

// ==========================================
// ENERGY BUSINESS TYPE SYSTEM
// (Extends previous modules)
// ==========================================

// Energy objects and services
object energia_excedente = "energía eléctrica excedente generada", movable;
service venta_energia = "venta energía a CFE", positive;
service reparto_ingresos = "reparto 30% ingresos", positive;
service pago_energia = "pago por energía vendida", positive;
service cumplimiento_regulatorio = "cumplimiento requisitos regulatorios", positive;

// Energy business subjects
subject cfe_distribucion = "CFE Distribucion";
subject cre = "Comision Reguladora de Energía";

// ==========================================
// ENERGY BUSINESS ACTIONS
// ==========================================

// Energy generation and availability
action generar_energia_excedente = "generar energía excedente del sistema solar para venta", energia_excedente;

// Energy sales actions
action vender_energia_cfe = "vender energía excedente generada por el sistema a Suministradores de Servicios Básicos", venta_energia;
action pagar_por_energia = "pagar por energía eléctrica recibida", pago_energia;

// Revenue sharing actions
action compartir_30_porciento = "compartir 30% de los ingresos por venta de energía excedente con el arrendatario", reparto_ingresos;
action recibir_participacion = "recibir participacion en ingresos por venta de energía", reparto_ingresos;

// Regulatory compliance actions
action cumplir_requisitos_generadores = "cumplir con todos los requisitos regulatorios para Generadores Exentos y Contratos de Cobertura", cumplimiento_regulatorio;

// ==========================================
// ENERGY BUSINESS ASSETS (All will be used in clauses)
// ==========================================

// Energy availability and generation
asset energia_excedente_disponible = arrendador, generar_energia_excedente, arrendatario;

// Energy sales chain
asset venta_energia_cfe = arrendador, vender_energia_cfe, cfe_distribucion;
asset pago_energia_cfe = cfe_distribucion, pagar_por_energia, arrendador;

// Revenue sharing chain  
asset reparto_beneficios = arrendador, compartir_30_porciento, arrendatario;
asset recepcion_beneficios = arrendatario, recibir_participacion, arrendador;

// Regulatory compliance
asset cumplimiento_regulatorio_cre = arrendador, cumplir_requisitos_generadores, cre;

// ==========================================
// ENERGY BUSINESS CLAUSES (Every asset gets legal force)
// ==========================================

// Energy generation foundation
clause generacion_energia_habilitada = oblig(contrato_arrendamiento) IMPLIES oblig(energia_excedente_disponible);

// Energy sales logic
clause venta_energia_condicional = oblig(energia_excedente_disponible) IMPLIES claim(venta_energia_cfe);
clause pago_energia_obligatorio = oblig(venta_energia_cfe) IMPLIES oblig(pago_energia_cfe);

// Revenue sharing logic
clause reparto_obligatorio = oblig(venta_energia_cfe) IMPLIES oblig(reparto_beneficios);
clause recepcion_beneficios_garantizada = oblig(reparto_beneficios) IMPLIES oblig(recepcion_beneficios);

// Regulatory compliance
clause cumplimiento_regulatorio_obligatorio = oblig(venta_energia_cfe) IMPLIES oblig(cumplimiento_regulatorio_cre);

// ==========================================
// ENERGY BUSINESS JOINS (Commercial relationships)
// ==========================================

// Primary energy transaction (energy sale ↔ payment from CFE)
asset negocio_energia_cfe = sell(venta_energia_cfe, pago_energia_cfe);

// Revenue distribution (landlord sharing ↔ tenant receiving)
asset distribucion_ingresos = compensation(reparto_beneficios, recepcion_beneficios);

// Energy business foundation (generation enables sales)
asset modelo_energetico = join(energia_excedente_disponible, venta_energia_cfe);

// Regulatory framework (compliance with business model)
asset marco_regulatorio = join(cumplimiento_regulatorio_cre, negocio_energia_cfe);

// ==========================================
// MODULE 3 VALIDATION
// ==========================================

asset modelo_energetico_valido = global();

// ==========================================
// ENERGY BUSINESS SUMMARY
// ==========================================
// Assets defined: 6
// Assets used in clauses: 6 (100% coverage)
// Clauses: 6
// Join operations: 4
// Global validation: 1
// Dependencies: 3 clauses depend on previous modules
// New subjects: 2 (cfe_distribucion, cre)
// ==========================================

// ==========================================
// MODULE 4: BREACH SCENARIOS CLUSTER - CORRECTED
// Conditional breach logic, not permanent breach facts
// ==========================================

// ==========================================
// EXTERNAL SUBJECTS
// ==========================================

subject evento_externo = "Evento de fuerza mayor";

// ==========================================
// BREACH CONDITION ACTIONS (Missing definitions)
// ==========================================

// Tenant breach actions
action incumplir_pago_3_meses = "incumplir el pago de renta por 3 meses consecutivos", incumplimiento_pago;
action usar_fuera_autoconsumo = "usar el sistema solar fuera del autoconsumo permitido", uso_indebido;
action causar_danos_graves = "causar daños graves al sistema solar por culpa o negligencia", danos_sistema;
action modificar_sin_consentimiento = "modificar el sistema solar sin consentimiento previo del arrendador", modificacion_ilegal;

// Landlord breach actions
action incumplir_mantenimiento_persistente = "incumplir las obligaciones de mantenimiento de forma persistente", incumplimiento_mantenimiento;
action perder_capacidad_50_porciento = "perder más del 50% de la capacidad de generación del sistema", perdida_capacidad;
action presentar_defectos_graves = "presentar defectos de fabricación que impiden el funcionamiento", defectos_fabricacion;

// Rescission actions
action exigir_rescision_falta_pago = "exigir la rescisión del contrato por falta de pago", rescision_contrato;
action exigir_rescision_uso_indebido = "exigir la rescisión del contrato por uso indebido", rescision_contrato;
action exigir_rescision_danos_graves = "exigir la rescisión del contrato por daños graves", rescision_contrato;
action exigir_rescision_modificaciones = "exigir la rescisión del contrato por modificaciones no autorizadas", rescision_contrato;
action exigir_rescision_mantenimiento = "exigir la rescisión del contrato por incumplimiento de mantenimiento", rescision_contrato;
action exigir_rescision_perdida_capacidad = "exigir la rescisión del contrato por pérdida de capacidad", rescision_contrato;
action exigir_rescision_defectos_ocultos = "exigir la rescisión del contrato por defectos ocultos", rescision_contrato;

// Termination actions
action cumplir_plazo_20_anos = "cumplir el plazo de 20 años del contrato", plazo_contrato;
action llegar_junio_2044 = "llegar a junio de 2044", plazo_contrato;
action acordar_terminacion_mutua = "acordar la terminación mutua del contrato", terminacion_consensual;
action solicitar_terminacion_90_dias = "solicitar terminación anticipada con 90 días de aviso", terminacion_anticipada;
action terminar_automaticamente_2044 = "terminar automáticamente el contrato en 2044", terminacion_automatica;
action terminar_mutuo_acuerdo = "terminar el contrato por mutuo acuerdo", terminacion_consensual;
action terminar_caso_fortuito = "terminar el contrato por caso fortuito", terminacion_fuerza_mayor;

// Force majeure actions
action ocurrir_caso_fortuito = "ocurrir un caso fortuito", fuerza_mayor;
action destruir_sistema_totalmente = "destruir totalmente el sistema solar", fuerza_mayor;
action impedir_uso_totalmente = "impedir totalmente el uso del sistema", fuerza_mayor;
action prolongar_impedimento_2_meses = "prolongar el impedimento por más de 2 meses", fuerza_mayor;
action suspender_pago_fuerza_mayor = "suspender el pago por fuerza mayor", suspension_pago;
action solicitar_rescision_impedimento = "solicitar rescisión por impedimento prolongado", rescision_impedimento;

// Special rights actions
action requerir_mejoras_techo = "requerir mejoras estructurales del techo", mejoras_estructurales;
action causar_rescision_culpable = "causar rescisión del contrato por culpa propia", rescision_arrendador;
action tener_arrendamiento_5_anos = "tener arrendamiento por más de 5 años con mejoras", arrendamiento_largo;
action formalizar_por_escrito = "formalizar el contrato por escrito", formalizacion_legal;
action ejercer_opcion_compra_180k = "ejercer opción de compra por 180,000 MXN", opcion_compra;
action pagar_mejoras_estructurales = "pagar mejoras estructurales del techo", mejoras_estructurales;
action compensar_mejoras_rescision = "compensar mejoras útiles en caso de rescisión", proteccion_mejoras;
action ejercer_preferencia_compra = "ejercer derecho de preferencia en compra", preferencia_compra;
action mantener_vigencia_muerte = "mantener vigencia ante muerte de cualquier parte", supervivencia_legal;
action transferir_propiedad_inmueble = "transferir propiedad del inmueble", transferencia_propiedad;
action transferir_a_herederos = "transferir obligaciones a herederos", supervivencia_legal;
action mantener_ante_venta_inmueble = "mantener contrato ante venta del inmueble", continuidad_legal;
action cumplir_36_meses_pago = "cumplir 36 meses consecutivos de pago de renta", pago_mensual;
action ofrecer_venta_terceros = "ofrecer venta del sistema a terceros", venta_sistema;

// ==========================================
// BREACH CONDITION ASSETS (Potential breach scenarios)
// ==========================================

// Tenant potential breach conditions
asset incumplimiento_3_meses_consecutivos = arrendatario, incumplir_pago_3_meses, arrendador;
asset uso_sistema_fuera_autoconsumo = arrendatario, usar_fuera_autoconsumo, arrendador;
asset danos_graves_imputables = arrendatario, causar_danos_graves, arrendador;
asset modificacion_sin_autorizacion = arrendatario, modificar_sin_consentimiento, arrendador;

// Landlord potential breach conditions
asset incumplimiento_mantenimiento_persistente = arrendador, incumplir_mantenimiento_persistente, arrendatario;
asset perdida_capacidad_superior_50 = arrendador, perder_capacidad_50_porciento, arrendatario;
asset defectos_impiden_funcionamiento = arrendador, presentar_defectos_graves, arrendatario;

// ==========================================
// RESCISSION RIGHTS ASSETS
// ==========================================

// Landlord rescission rights
asset rescision_por_falta_pago = arrendador, exigir_rescision_falta_pago, arrendatario;
asset rescision_por_uso_indebido = arrendador, exigir_rescision_uso_indebido, arrendatario;
asset rescision_por_danos_sistema = arrendador, exigir_rescision_danos_graves, arrendatario;
asset rescision_por_modificaciones = arrendador, exigir_rescision_modificaciones, arrendatario;

// Tenant rescission rights
asset rescision_por_mal_mantenimiento = arrendatario, exigir_rescision_mantenimiento, arrendador;
asset rescision_por_perdida_funcionalidad = arrendatario, exigir_rescision_perdida_capacidad, arrendador;
asset rescision_por_defectos_ocultos = arrendatario, exigir_rescision_defectos_ocultos, arrendador;

// ==========================================
// BREACH LOGIC CLAUSES (IF breach occurs, THEN rescission right)
// ==========================================

// Landlord rescission triggers (CONDITIONAL)
clause rescision_activada_falta_pago = oblig(incumplimiento_3_meses_consecutivos) IMPLIES claim(rescision_por_falta_pago);
clause rescision_activada_uso_indebido = oblig(uso_sistema_fuera_autoconsumo) IMPLIES claim(rescision_por_uso_indebido);
clause rescision_activada_danos = oblig(danos_graves_imputables) IMPLIES claim(rescision_por_danos_sistema);
clause rescision_activada_modificacion = oblig(modificacion_sin_autorizacion) IMPLIES claim(rescision_por_modificaciones);

// Tenant rescission triggers (CONDITIONAL)
clause rescision_activada_mantenimiento = oblig(incumplimiento_mantenimiento_persistente) IMPLIES claim(rescision_por_mal_mantenimiento);
clause rescision_activada_perdida = oblig(perdida_capacidad_superior_50) IMPLIES claim(rescision_por_perdida_funcionalidad);
clause rescision_activada_defectos = oblig(defectos_impiden_funcionamiento) IMPLIES claim(rescision_por_defectos_ocultos);

// ==========================================
// NO BREACH DETECTION CLAUSES!
// (We don't make breaches always true)
// ==========================================

// ==========================================
// BREACH JOINS (Legal protection patterns)
// ==========================================

// Landlord protection cluster
asset proteccion_arrendador_pago_uso = join(rescision_por_falta_pago, rescision_por_uso_indebido);
asset proteccion_arrendador_danos_modificacion = join(rescision_por_danos_sistema, rescision_por_modificaciones);
asset proteccion_arrendador_completa = join(proteccion_arrendador_pago_uso, proteccion_arrendador_danos_modificacion);

// Tenant protection cluster  
asset proteccion_arrendatario_mantenimiento_perdida = join(rescision_por_mal_mantenimiento, rescision_por_perdida_funcionalidad);
asset proteccion_arrendatario_completa = join(proteccion_arrendatario_mantenimiento_perdida, rescision_por_defectos_ocultos);

// Balanced protection system
asset equilibrio_protecciones = compensation(proteccion_arrendador_completa, proteccion_arrendatario_completa);

// ==========================================
// MODULE 4 VALIDATION
// ==========================================

asset sistema_incumplimientos_valido = global();

// ==========================================
// MODULE 5: TERMINATION & SPECIAL CONDITIONS - CORRECTED
// Conditional termination logic, not permanent disaster states
// ==========================================

// ==========================================
// TERMINATION CONDITION ASSETS (Potential scenarios)
// ==========================================

// Natural termination conditions
asset cumplimiento_plazo_20_anos = arrendador, cumplir_plazo_20_anos, arrendatario;
asset fecha_terminacion_2044 = arrendador, llegar_junio_2044, arrendador;

// Consensual termination conditions  
asset acuerdo_mutuo_90_dias = arrendador, acordar_terminacion_mutua, arrendatario;
asset solicitud_terminacion_anticipada = arrendatario, solicitar_terminacion_90_dias, arrendador;

// Force majeure conditions (POTENTIAL, not always occurring)
asset caso_fortuito_ocurrido = evento_externo, ocurrir_caso_fortuito, arrendador;
asset destruccion_total_sistema = evento_externo, destruir_sistema_totalmente, arrendador;
asset impedimento_total_uso = evento_externo, impedir_uso_totalmente, arrendador;
asset impedimento_prolongado_2_meses = evento_externo, prolongar_impedimento_2_meses, arrendador;

// ==========================================
// TERMINATION EXECUTION ASSETS
// ==========================================

// Natural termination execution
asset terminacion_automatica_2044 = arrendador, terminar_automaticamente_2044, arrendatario;

// Consensual termination execution
asset terminacion_consensual_90_dias = arrendador, terminar_mutuo_acuerdo, arrendatario;

// Force majeure termination execution
asset terminacion_destruccion_total = arrendador, terminar_caso_fortuito, arrendatario;
asset suspension_caso_fortuito = arrendatario, suspender_pago_fuerza_mayor, arrendador;
asset rescision_impedimento_prolongado = arrendatario, solicitar_rescision_impedimento, arrendador;

// ==========================================
// TERMINATION LOGIC CLAUSES
// ==========================================

// Natural termination triggers
clause plazo_cumplimiento_obligatorio = oblig(contrato_arrendamiento) IMPLIES oblig(cumplimiento_plazo_20_anos);
clause terminacion_automatica = oblig(cumplimiento_plazo_20_anos) IMPLIES oblig(terminacion_automatica_2044);

// Consensual termination triggers
clause terminacion_por_acuerdo = oblig(acuerdo_mutuo_90_dias) IMPLIES claim(terminacion_consensual_90_dias);

// Force majeure termination triggers
clause terminacion_por_destruccion = oblig(destruccion_total_sistema) IMPLIES oblig(terminacion_destruccion_total);
clause suspension_por_impedimento = oblig(impedimento_total_uso) IMPLIES claim(suspension_caso_fortuito);
clause rescision_por_impedimento_prolongado = oblig(impedimento_prolongado_2_meses) IMPLIES claim(rescision_impedimento_prolongado);

// ==========================================
// MODULE 5 VALIDATION
// ==========================================

asset sistema_terminacion_valido = global();

// ==========================================
// MODULE 6: SPECIAL RIGHTS & OPTIONS
// ==========================================

// ==========================================
// SPECIAL RIGHTS CONDITION ASSETS
// ==========================================

// Purchase option conditions
asset cumplimiento_36_meses_renta = arrendatario, cumplir_36_meses_pago, arrendador;
asset mejoras_estructura_requeridas = arrendador, requerir_mejoras_techo, arrendatario;

// Preference conditions
asset oferta_venta_terceros = arrendador, ofrecer_venta_terceros, arrendatario;
asset arrendamiento_5_anos_mejoras = arrendador, tener_arrendamiento_5_anos, arrendatario;

// Legal formality conditions
asset formalizacion_escrita = arrendador, formalizar_por_escrito, arrendatario;

// ==========================================
// SPECIAL RIGHTS EXECUTION ASSETS
// ==========================================

// Purchase option execution
asset opcion_compra_36_meses = arrendatario, ejercer_opcion_compra_180k, arrendador;

// Improvement authorization and protection
asset mejoras_autorizadas = arrendatario, pagar_mejoras_estructurales, arrendador;
asset proteccion_mejoras = arrendador, compensar_mejoras_rescision, arrendatario;

// Purchase preference rights
asset derecho_preferencia = arrendatario, ejercer_preferencia_compra, arrendador;

// ==========================================
// SPECIAL RIGHTS LOGIC CLAUSES
// ==========================================

// Purchase option triggers
clause opcion_condicional = oblig(cumplimiento_36_meses_renta) IMPLIES claim(opcion_compra_36_meses);

// Improvement authorization triggers
clause mejoras_obligatorias = oblig(mejoras_estructura_requeridas) IMPLIES oblig(mejoras_autorizadas);
clause compensacion_mejoras = oblig(rescision_culpa_arrendador) IMPLIES oblig(proteccion_mejoras);

// Purchase preference triggers
clause preferencia_compra = oblig(oferta_venta_terceros) IMPLIES claim(derecho_preferencia);

// ==========================================
// MODULE 6 VALIDATION
// ==========================================

asset sistema_derechos_especiales_valido = global();

// ==========================================
// MODULE 7: LEGAL SURVIVAL & CONTINUITY
// ==========================================

// ==========================================
// LEGAL SURVIVAL ASSETS
// ==========================================

// Contract survival conditions
asset supervivencia_ante_muerte = arrendador, mantener_vigencia_muerte, arrendatario;
asset transferencia_ante_venta = arrendador, transferir_propiedad_inmueble, arrendador;

// ==========================================
// LEGAL SURVIVAL EXECUTION ASSETS
// ==========================================

// Death survival execution
asset continuidad_ante_muerte = arrendador, transferir_a_herederos, arrendatario;

// Property sale survival execution
asset continuidad_ante_venta = arrendador, mantener_ante_venta_inmueble, arrendatario;

// ==========================================
// LEGAL SURVIVAL LOGIC CLAUSES
// ==========================================

// Death survival triggers
clause supervivencia_muerte = oblig(supervivencia_ante_muerte) IMPLIES oblig(continuidad_ante_muerte);

// Property sale survival triggers
clause supervivencia_venta = oblig(transferencia_ante_venta) IMPLIES oblig(continuidad_ante_venta);

// ==========================================
// MODULE 7 VALIDATION
// ==========================================

asset sistema_supervivencia_valido = global();
